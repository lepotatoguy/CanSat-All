
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.util.*;
import java.util.concurrent.TimeUnit;
import java.time.*;
import java.time.format.DateTimeFormatter;

import javax.swing.*;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

import com.fazecast.jSerialComm.SerialPort;
import static java.awt.SystemColor.window;

/**
 *
 * @author Joyanta
 */
public class GUI extends javax.swing.JFrame {
    
    static SerialPort chosenPort;
    static int x = 0; // seconds which will be in the graph "A"
    
    static String id = "ID";
	static String name = "Name";
	static String age = "Age";
	static String filePath = "output.csv";
        // static JComboBox<String> comPort;
    /**
     * Creates new form GUI
     */
    public GUI() {
        
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Welcome = new javax.swing.JLabel();
        Connect = new javax.swing.JButton();
        comPort = new JComboBox<String>();
        Trademark = new javax.swing.JLabel();
        SensorA = new javax.swing.JPanel();
        SensorB = new javax.swing.JPanel();
        SensorC = new javax.swing.JPanel();
        SensorD = new javax.swing.JPanel();
        SensorE = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);

        Welcome.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        Welcome.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Welcome.setText("Welcome to CanSat GUI. Choose a Port:");

        Connect.setText("Connect");
        Connect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConnectActionPerformed(evt);
            }
        });

        SerialPort[] portNames = SerialPort.getCommPorts();
        for (int i = 0; i < portNames.length; i++) {
            comPort.addItem(portNames[i].getSystemPortName());

        }
        comPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comPortActionPerformed(evt);
            }
        });

        Trademark.setText("Made with Love by Asteroid Invaders ");

        SensorA.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        SensorA.setLayout(new java.awt.BorderLayout());

        SensorB.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        SensorB.setLayout(new java.awt.BorderLayout());

        SensorC.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        SensorC.setLayout(new java.awt.BorderLayout());

        SensorD.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout SensorDLayout = new javax.swing.GroupLayout(SensorD);
        SensorD.setLayout(SensorDLayout);
        SensorDLayout.setHorizontalGroup(
            SensorDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 307, Short.MAX_VALUE)
        );
        SensorDLayout.setVerticalGroup(
            SensorDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        SensorE.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout SensorELayout = new javax.swing.GroupLayout(SensorE);
        SensorE.setLayout(SensorELayout);
        SensorELayout.setHorizontalGroup(
            SensorELayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        SensorELayout.setVerticalGroup(
            SensorELayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(SensorD, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(SensorA, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(SensorB, javax.swing.GroupLayout.DEFAULT_SIZE, 305, Short.MAX_VALUE)
                            .addComponent(SensorE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(Welcome)
                        .addGap(18, 18, 18)
                        .addComponent(comPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 129, Short.MAX_VALUE)
                        .addComponent(Trademark))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Connect)
                        .addContainerGap(238, Short.MAX_VALUE))
                    .addComponent(SensorC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Connect)
                    .addComponent(comPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Welcome))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(SensorA, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
                    .addComponent(SensorB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(SensorC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 241, Short.MAX_VALUE)
                        .addComponent(Trademark))
                    .addComponent(SensorD, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(SensorE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void comPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comPortActionPerformed
         comPortFind();

    }//GEN-LAST:event_comPortActionPerformed

    private void ConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConnectActionPerformed
        if (Connect.getText().contentEquals("Connect")) {
    comPortFind();        
    TurnOnSensorAActionPerformed();
    TurnOnSensorBActionPerformed();
    // attempt to connect to the serial port
        chosenPort = SerialPort.getCommPort(comPort.getSelectedItem().toString());
        chosenPort.setComPortTimeouts(SerialPort.TIMEOUT_SCANNER, 0, 0);
        if (chosenPort.openPort()) {
            Connect.setText("Disconnect");
            comPort.setEnabled(false);
        }

        // create new thread that listens for incoming text and populate the graph
        Thread thread = new Thread() {
            @Override
            public void run() {
                Scanner sc = new Scanner(chosenPort.getInputStream());
                while (sc.hasNextLine()) {
                    try {
                        String line = sc.nextLine(); // geting line of text from the serial port (the most
                        // important part)
                        int number = Integer.parseInt(line);
                        name = line; // updating data
                        id = Integer.toString(x); // updating time as x is time right now
                        saveRecord(id, name, age, filePath); // saving the updated data
                      //  series.add(x++, number);
                        //here, we will be needing to customize for each sensor's output
                       // JFrame.repaint();
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Error in Incoming Output from Arduino");
                    }
                }
                sc.close(); // close after disconnect
                JOptionPane.showMessageDialog(null, "Record Saved");
            }

        };
        thread.start();
}

    
        else {
					// disconnect from the serial port
					chosenPort.closePort();
        comPort.setEnabled(true);
        Connect.setText("Connect");
        //series.clear();
        //series_b.clear();
        //series_c.clear();
        x = 0;
    }
    }//GEN-LAST:event_ConnectActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        comPortFind();
        
       
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI

.class  


.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI

.class  


.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI

.class  


.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI

.class  


.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
      /*  java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        }); */
    }
    
    public static void saveRecord(String id, String name, String age, String filePath) {
		try {

			FileWriter fw = new FileWriter(filePath, true);
			BufferedWriter bw = new BufferedWriter(fw);
                    try (PrintWriter pw = new PrintWriter(bw)) {
                        pw.println(id + ", " + name + ", " + age);
                        pw.flush(); // make sure all data is written in the file
                    }

		} catch (IOException E) {
			JOptionPane.showMessageDialog(null, "Record Not Saved");
		}
	}
    public static void comPortFind(){
        JComboBox<String> comPort = new JComboBox<>(); 
        SerialPort[] portNames = SerialPort.getCommPorts();
        for (SerialPort portName : portNames) {
            comPort.addItem(portName.getSystemPortName());
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton Connect;
    public javax.swing.JPanel SensorA;
    public javax.swing.JPanel SensorB;
    public javax.swing.JPanel SensorC;
    public javax.swing.JPanel SensorD;
    public javax.swing.JPanel SensorE;
    public javax.swing.JLabel Trademark;
    public javax.swing.JLabel Welcome;
    public javax.swing.JComboBox<String> comPort;
    // End of variables declaration//GEN-END:variables

    private void TurnOnSensorAActionPerformed() {
                XYSeries series = new XYSeries("A Sensor Readings");
		XYSeriesCollection data = new XYSeriesCollection(series);
		// data.addSeries(series);
		JFreeChart chart = ChartFactory.createXYLineChart("A Sensor Readings", "X Axis Label", "Y Axis Label", data);
		ChartPanel chartPanel1 = new ChartPanel(chart);
		// chartPanel1.setDomainZoomable(true);
		//chartPanel1.setMouseZoomable(true);
		chartPanel1.setPreferredSize(new java.awt.Dimension(249, 307));
		// chart.setSize();
                SensorA.add(chartPanel1, BorderLayout.CENTER); //To change body of generated methods, choose Tools | Templates.
    }
     private void TurnOnSensorBActionPerformed() {
                XYSeries series_b = new XYSeries("B Sensor Readings");
		XYSeriesCollection data_b = new XYSeriesCollection(series_b);
		// data.addSeries(series);
		JFreeChart chart_b = ChartFactory.createXYLineChart("B Sensor Readings", "X Axis Label", "Y Axis Label", data_b);
		ChartPanel chartPanel2 = new ChartPanel(chart_b);
		// chartPanel1.setDomainZoomable(true);
		//chartPanel1.setMouseZoomable(true);
		chartPanel2.setPreferredSize(new java.awt.Dimension(249, 307));
		// chart.setSize();
                SensorB.add(chartPanel2, BorderLayout.CENTER);
    }
}
